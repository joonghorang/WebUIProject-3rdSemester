21 Express.js 를 활용한 웹 애플리케이션 개발 

프레임 워크는 HTML 애플리케이션 개발을 단순화 및 구조화하고 
HTTP 요청을 올바른 컨트롤러 코드로 라우팅, 정적 자원 제공, HTML 템플릿 렌더링 같은
공통 문제를 해결하는 것을 목적으로 한다. 

Express.js는 커넥트 미들웨어 엔진을 기반으로 한다. 
Express.js는 HTTP 요청에 응답하는 미들웨어를 설정하게 해줄 뿐 아니라 
HTTP 방식 및 URL 을 기반으로(라우팅 테이블을 정의하게 함으로써) 각기 다른 행동을 수행하게 해준다. 
또 템플릿에 전달하는 인자를 기반으로 동적으로 HTML 문서를 렌더링할 수 있게 해준다. 

- EXPRESS.JS 애플리 케이션의 초기화 

먼저 익스프레스를 전역으로 설치해야한다. 
npm install -g express@2.5.x

그럼 익스프레스에서 생성한 app.js파일을 볼 수 있는데,
여기서 초기 의존성이 로드된 후 express.createServer()를 사용해 익스프레스 서버를 인스턴스화하는 것을 볼 수 있다.
이 서버는 커넥트 HTTP 서버를 상속하는데, 
커넥트 HTTP 서버는 다시 노드 HTTP 서버를 상속한다. 

그런 다음 이 코드는 애플리케이션 설정에 들어간다. 
먼저 veiws 설정을 HTML 페이지를 구성하는 데 사용하는 템플릿 파일의 루트로 설정한다. 
그런 다음 view engine 설정을 jade로 설정한다.
제이드는 템플릿 엔진에서 흔히 기대하는 HTML을 위한 템플리 언어다.
제이드는 HTML 블록과 동적 값을 렌더링하고, 순환문을 수행하며,
다른 템플릿을 포함할 수 있다. 원한다면 익스프레스에서 생성한 views 디렉터리 안에 있는 제이드 템플릿을 살펴보는 것도
도움이 될 것이다. 


애플리케이션의 미들웨어 설정 

미들웨어 컴포넌트는 요청에서 정의한 컨텐츠 타입에 따라 요청 본문을 파싱하는 데 사용한다. 
그런 다음 HTTP 방식 오버라이드 미들웨어가 애플리케이션에 추가된다. 
이 미들우에ㅓ 컴포넌트는 브라우저가 GET과 POST 이외의 HTTP 방식을 시뮬레이션할 수 있게 해준다. 
HTTP 표준에서는 GET, POST, DELETE, PUT등의 다양한 방식을 정의하지만, 
웹 브라우저는 이것들을 사용할 수 없다. 
폼을 전송하거나 AJAX 요청을 수행할 때 대부분의 브라우저는 GET이나 POST 요청만 사용할 수 있다. 
하지만 _method라는 숨은 인자명으로 HTTP 방식을 지정하면 서버 및 HTTP 방식 오버라이드 미들웨어의 도움을 받아 
브라우저가 마치 다른 HTTP 방식을 사용하는 것처럼 행동할 수 있다. 


*HTTP 방식 오버라이드 미들웨어를 사용할 때는 몇 가지 장점이 있다.
먼저 표준 HTTP 방식을 기반으로 더 풍부한 라우팅 결정을 내릴 수 있다. 
두번째로 이 방식을 요청하는 HTTP클라이언트를 브라우저와 동일하게 처리할 수 있으므로 서버사이드 코드가 그만큼 
단순해진다. 


- 요청 라우팅 
HTTP 서버 요청 리스너나 미들웨어 컴포넌트를 정의하면 이 코드는 모든 요청에서 호출된다. 
하지만 애플리케이션의 각기 다른 영역은 각기 다른 서버 동작을 호출해야한다. 예를 들어 GET 요청은 POST 요청과는 다르게
처리돼야 하며, URL이 다르면 응답도 달라야 한다. 예를 들어 개발 중인 애플리케이션 영역에서 사용자 프로필을 보여주고 싶다면 
다음과 같은 방식 및 URL 조합이 각기 다른 형태로 동작해야 한다. 

GET /users : 사용자 목록을 보여주거나 사용자를 검색함. 
GET /users/:username : 일반적으로 다음 줄과 같이 사용자 명을 통해 사용자의 프로필을 보여준다. 
GET /users/joe : 이름이 'joe'인 사용자의 프로필을 보여줌. 

POST /users : 사용자 프로필을 생성 
POST /users/:username : 일반적으로 다음 줄과 같이 특정 사용자명을 통해 사용자 프로필을 업데이트함 
POST /users/joe : 이름이 'joe'인 사용자의 프로필을 업데이트함. 

위의 목록은 라우팅 테이블을 정의한다. 
이 테이블은 HTTP 방식 및 URL 패턴을 행동으로 매핑한다. 

- 요청 처리 
app.get('/', routes.index);
이 코드에서는 GET 요청을 / URL 로 보내면 routes.index 핸들러가 호출되게 한다. 

