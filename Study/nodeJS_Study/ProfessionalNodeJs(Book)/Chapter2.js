02 노드 소개 

이벤트 주도 프로그래밍 방식의 이해 
이는 실행 흐름을 이벤트를 통해 판단하는 프로그래밍 방식이다. 
이벤트는 이벤트 핸들러(또는 이벤트 콜백)를 통해 처리한다. 

즉 먼저 쿼리가 실행을 마칠 시점에 수행할 작업을 정의하고, 
이 작업을 특정 이름의 함수로 저장한다. 
그런 다음 이 함수를 쿼리의 인자로 넘겨준다. 
쿼리가 실행을 마치면 쿼리는 단순히 결과를 반환하는 대신 특정 이름의 함수를 호출한다. 

이런 프로그래밍 방식을 "비동기적(Async) // 주체가 내가 아님" 프로그래밍이라고 한다.

이벤트 주도 프로그래밍 방식에는 이벤트 루프가 항상 따라다닌다. 
이벤트 루프틑 연속 루프에서 두 가지 기능을 주로 실행하는 구조체다. 
이벤트 루프는 이벤트 감지와 이벤트 핸들러 트리거를 수행한다. 
루프가 실행되는 동안 이벤트 루프는 어떤 이벤트가 일어났는지 감지한다. 
그런 다음 이벤트가 일어나면 이벤트 콜백을 판단해 이를 실행한다. 

그렇기 때문에 
- 특정 시점에 실행 중인 이벤트 핸들러는 최대 하나뿐이다. 
- 모든 이벤트 핸들러는 방해를 받지 않고 실행을 마칠 수 있다. 


노드와 자바스크립트에서 비동기적 애플리케이션 개발이 쉬운 이유 


클로저란? 클로저는 자신을 감싼 환경으로부터 변수를 상속하는 함수다. 
함수 콜백을 I/O 처리하는 다른 함수의 인자로 넘겨주면 이 콜백 함수는 나중에 호출되면서
자신이 선언된 컨텍스트를 기억하고, 이 컨텍스트 및 부모 컨텍스트에서 사용할 수 있는 변수를 모두 
기억한다. 이는 노드가 성공을 거두게 해준 가장 핵심적인 기능이다. 

예를 들어 버튼 클릭이벤트를 수신하고 싶다면 다음과 같은 콛를 작성하면 된다. 

(function() {
	var clickCount = 0;
	document.getElementById('myButton').onclick = function(){
		clickCount++;
		console.log("clicked " + clickCount + " times.");
	});
}());

* 자바스크립트에서 함수는 일급 객체다. 이 말은 함수를 다른 함수의 인자로 넘겨줄 수 있다는 뜻이다. 

클로저가 비동기적 프로그래밍에 도움되는 이유 
자바스크립트에서 함수는 단독으로 실행되는 방식이 아니라 
자신이 선언된 컨텍스트를 기억하는 방식을 통해 실행되며,
이를 통해 현재 컨텍스트 또는 부모 컨텍스트에 있는 어떤 변수에도 접근할 수 있다. 

이는 클로저 패턴을 활용할 경우 두 가지 장점이 있음을 보여준다. 
즉, 이벤트 주도 프로그래밍을 할 수 있을뿐더러 함수로 상태를 넘겨줌으로써
상태를 유지하는 걱정을 하지 않아도 된다는 것이다. 
대신 자바스크립트 클로저가 상태를 그대로 유지해준다. 